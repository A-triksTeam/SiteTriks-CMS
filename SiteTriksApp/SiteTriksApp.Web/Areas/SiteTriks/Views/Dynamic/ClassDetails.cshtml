@model SiteTriks.Dynamic.Models.DynamicTypeMainViewModel

@{
    ViewBag.Title = Model.DynamicClass.Title;
}

@section Styles {
    <link href="~/css/navbar-remove.css" rel="stylesheet" />
}

<div class="fixed-top-2">
    @await Html.PartialAsync("SecondNavHeader")

    <a href="@Url.Action("Index")" class="btn-nav-2"><span class="st-icon-return-to-list"></span>Return to assemblies</a>
    <a href="@Url.Action("CreateItem", new { assemblyName = Model.AssemblyName, className = Model.DynamicClass.Name })" class="btn-nav-2"><span class="glyphicon glyphicon-plus"></span>Create Item</a>
</div>

<div class="backend-wrapper">
    <div class="grid"></div>
</div>

@section scripts{
    <script type="text/javascript">

        var grid = Grid();
        var data = { link: "/sitetriks/dynamic/grid?assemblyName=@Model.AssemblyName&className=@Model.DynamicClass.Name", serverSide: true }
        var columns = [
            {
                name: 'id',
                title: '',
                type: 'checkbox',
                @if (Model.DynamicClass.Properties.Any(p=>p.Name == "LinkId"))
                {
                    <text>
                    extraFields: ['LinkId'],
                    </text>
                }
                size: 1
            },
            {
                name: "title",
                title: "Title",
                type: 'string',
                size: 2,
                headerTemplate: '<strong>#item#</strong>'
            },

            @foreach (var prop in Model.DynamicClass.Properties)
            {
                string template = string.Empty;
                string type = "string";

                switch (prop.Name)
                {
                    case "Title":
                        continue;
                    case "LinkId":
                            @*<span>  |  @Html.Action("GetLinkValue", new { id = value })</span>*@
                    template = "<b>#item#</b>";

                    break;
                case "Images":
                    template = "<img src=\"/files/id/#item#\" class=\"display-image img-small\" />";
                    type = "list";
                    break;
                default:
                    template = "#item#";

                    break;
                }

                if(prop.Type == "string-html")
                {
                    template = "<i>HTML</i>";
                }

                <text>
                    {
                        name: '@(Char.ToLowerInvariant(prop.Name[0]) + prop.Name.Substring(1))',
                        title: '@prop.Name',
                        type: '@type',
                        headerTemplate:'<b>#item#</b>',
                        contentTemplate: '@Html.Raw(template)',
                        size: 1
                    },
                </text>
            }
            {
                name: 'id',
                title: 'Action',
                size: 1,
                contentTemplate: '<a class="btn btn-warning" href="/sitetriks/dynamic/edititem/#item#?assemblyName=@Model.AssemblyName&amp;className=@Model.DynamicClass.Name">Edit</a>'
            }
        ];

        let buttons = [{
            title: 'Delete',
            postUrl: '/sitetriks/dynamic/deleteitems?assemblyName=@Model.AssemblyName&className=@Model.DynamicClass.Name',
            type: 'danger',
                @if (Model.DynamicClass.Properties.Any(p=>p.Name == "LinkId"))
                {
                    <text>
                    extraFields: ['linkId'],
                    </text>
                }
        }];

        var config = grid.build(columns, buttons, grid.defaultPager, data);

        let obj = grid.init('.grid', config);
    </script>
}
