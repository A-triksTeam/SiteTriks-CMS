@model SiteTriks.ECommerseModule.Models.StoreSkins.ManageSkinViewModel

@section Styles {
    <link href="~/css/page-content-edit.css" rel="stylesheet">
    <link href="~/css/layout.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="~/css/ecommerse.css" />
}

<div class="fixed-top-2">
    @await Html.PartialAsync("~/Areas/SiteTriks/Views/Shared/SecondNavHeader.cshtml")
    <a href="@Url.Action("Details", "StoreManager", new { id = Model.StoreId })" class="btn-nav-2"><span class="st-icon-return-to-list"></span>Cancel</a>
    <a class="btn-nav-2 btn-save">Save & Exit</a>
</div>

<div class="backend-wrapper">

    <div class="row">
        <div class="col-xs-10">
            <div>
                <div class="inline-block revision-history-wrapper">
                    <a class="btn btn-revision">
                        Revision History<span class="glyphicon glyphicon-menu-right"></span>
                        <span class="glyphicon glyphicon-menu-right"></span>
                    </a>
                    <div id="version-control" hidden>
                        <span>Ver.</span>
                        <select id="versions" class="form-control inline-block"></select>
                        <a id="btn-preview-version" class=""><span class="st-icon-preview single"></span><span class="tooltiptext">Preview the selected version</span></a>
                        <a id="btn-revert-version" class=""><span class="st-icon-reset single"></span><span class="tooltiptext">Revert the selected version</span></a>
                    </div>
                </div>
                <div class="resolutions-wrapper">
                    <span class="rs-icon-mobile resolution" data-type="xs"></span>
                    <span class="rs-icon-tablet resolution" data-type="sm"></span>
                    <span class="rs-icon-desktop resolution" data-type="md"></span>
                    <span class="rs-icon-desktop-hd resolution selected" data-type="lg"></span>
                </div>
            </div>
            <div id="preview-layout" class="unselectable" hidden>
                <div class="rows-holder"></div>
                <div>
                    <div class="add-row"><span class="glyphicon glyphicon-plus"></span></div>
                </div>
            </div>
            <div id="preview-container">

                <div class="conntent-wrapper main-content">
                    <div class="row-content">
                        <div data-placeholder="store-skin" class="placeholder row content-placeholder no-margin row-placeholder preview-placeholder static">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-2 widgets-list">
            <div class="toggle-layout-content">
                <div class="selected-option" data-type="content">
                    <div class="circle"></div>
                    <a class="show-content">Content</a>
                </div>
                <div data-type="layout">
                    <a class="show-layout">Layout</a>
                    <div class="circle"></div>
                </div>
            </div>
            @* add widgets here *@
            <div id="widgets-holder" class="clearfix">
                @foreach (var item in Model.Widgets)
                {
                    string attributes = string.Empty;
                    if (!string.IsNullOrWhiteSpace(item.Extra))
                    {
                        attributes = "data-extra=" + item.Extra;
                    }

                    <div data-type="@item.Type" class="drag" @attributes>@item.Name</div>
                }
            </div>
            <div id="layout-properties" hidden>
                <hr />
                <div id="main-layout-options"></div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("~/Areas/SiteTriks/Views/Shared/AddWidget.cshtml")
    @await Html.PartialAsync("~/Areas/SiteTriks/Views/Shared/EditWidget.cshtml")

    <!-- Delete confirmation modal -->
    <div id="layout-delete-confirmation" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete confirmation modal</h4>
                </div>
                <div class="modal-body">
                    <p>With deletion of rows/cols you will delete and inner content! Are you sure you want to continue?</p>
                </div>
                <div class="modal-footer">
                    <button id="delete-layout-content" type="button" class="btn btn-danger" data-dismiss="modal">Delete</button>
                </div>
            </div>

        </div>
    </div>
</div>


@section scripts{
    <script src="~/js/modules/utils.js"></script>
    <script type="text/javascript" src="~/js/modules/layout-control.js"></script>
    <script type="text/javascript" src="~/js/modules/widgets.js"></script>
    <script type="text/javascript" src="~/js/modules/module-builder.js"></script>
    <script type="text/javascript" src="~/js/widgets-draggable.js"></script>
    <script type="text/javascript" src="~/js/validator.js"></script>
    <script type="text/javascript" src="~/js/sitetriks/store-skins.js"></script>
    <script src="~/js/multiselect-setup.js"></script>
    <script type="text/javascript">
        (function () {
            let widgets = @Html.Raw(Json.Serialize(Model.Skin));
            let extraFields = @Html.Raw(Json.Serialize(Model.ExtraFields));
            let baseFields = @Html.Raw(Json.Serialize(Model.BaseFields));
            let navigationFields = @Html.Raw(Json.Serialize(Model.NavigationFields));
            let storeId = '@Model.StoreId';
            let skinId = '@Model.Id';
            let logger = new Logger('debug');
            let mediator = new Mediator(logger);
            let postUrl = '@Model.PostUrl';

            let pageWidgets = StoreSkins['get' + '@Model.Type' + 'Widgets'];
            if (Validator.isFunction(pageWidgets)) {
                StoreSkins.gridSkin(widgets, pageWidgets(extraFields, baseFields, navigationFields), logger, mediator, skinId, storeId, postUrl);
            }
        })();
    </script>
}
