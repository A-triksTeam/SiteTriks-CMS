// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteTriksApp.Web.Data;

namespace SiteTriksApp.Web.Migrations
{
    [DbContext(typeof(SiteTriksAppContext))]
    partial class SiteTriksAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SiteTriks.BlogModule.Data.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Summary");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("st_blogPosts");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.BaseMetasTags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BaseMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("st_baseMetas_tags");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ClassConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Fields");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_classConfigurations");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("st_comments");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Config", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsIdenticalToFile");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_configs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.DefaultLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("st_defaultLinks");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.DynamicView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("LastRequested");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("WidgetName");

                    b.HasKey("Id");

                    b.ToTable("st_dynamicViews");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("ImagesUrlsIDs");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MainImageUrlID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("st_ecommerceItems");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("ECommerceItemId");

                    b.Property<Guid?>("ECommercePaymentId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ECommerceItemId");

                    b.HasIndex("ECommercePaymentId");

                    b.ToTable("st_ecommerceOrders");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommercePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("InvoiceCode");

                    b.Property<string>("LastUserId");

                    b.Property<int>("Method");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("st_ecommercePayments");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.EndPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Column");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("JoinFields");

                    b.Property<string>("JoinKey");

                    b.Property<string>("JoinTable");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("RequestType");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int?>("Skip");

                    b.Property<int?>("Take");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_endPoints");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ExceptionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Domain");

                    b.Property<string>("ExceptionInformation");

                    b.HasKey("Id");

                    b.ToTable("st_exceptionLogs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt");

                    b.Property<byte[]>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension");

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LibraryId");

                    b.Property<Guid>("LinkId");

                    b.Property<Guid?>("OriginalFile");

                    b.Property<string>("RefferedInNews");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("SizeName");

                    b.Property<string>("StorageProviderName");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("UsedInPages");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("LinkId");

                    b.ToTable("st_files");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.FileBinary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<byte[]>("FileContent");

                    b.Property<Guid>("FileId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("FileBinaries");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.FileUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("FileId");

                    b.Property<string>("LastUserId");

                    b.Property<string>("RefferedInObject");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("UsedInPages");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("st_fileUse");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Filter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Comparison");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EndPointId");

                    b.Property<string>("LastUserId");

                    b.Property<string>("PropertyName");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EndPointId");

                    b.ToTable("st_filters");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.HtmlBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_htmlBlocks");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("UrlPrefix");

                    b.HasKey("Id");

                    b.ToTable("st_languages");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Languages.MultiLingualField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FieldName")
                        .HasMaxLength(150);

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Value")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("st_multiLingualFields");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllowedTypes");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("PrefixId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("StorageProviderName");

                    b.HasKey("Id");

                    b.HasIndex("PrefixId");

                    b.ToTable("st_libraries");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.LibraryThumbnails", b =>
                {
                    b.Property<Guid>("ThumbnailId");

                    b.Property<Guid>("LibraryId");

                    b.HasKey("ThumbnailId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("st_library_thumbnails");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.MarketingEmailOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Index");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_marketingEmailOptions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.News.NewsMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundJobId");

                    b.Property<string>("CurrentTags");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateToBePublished");

                    b.Property<Guid?>("DraftNewsVersionId");

                    b.Property<DateTime?>("LastPublished");

                    b.Property<string>("LastUserId");

                    b.Property<Guid?>("LinkId");

                    b.Property<int>("NewsStatus");

                    b.Property<Guid?>("PublishedNewsVersionId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("DraftNewsVersionId");

                    b.HasIndex("LinkId");

                    b.HasIndex("PublishedNewsVersionId");

                    b.ToTable("st_newsMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.News.NewsVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("ImagesUrlsIDs");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MainImageUrlID");

                    b.Property<Guid?>("NewsMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("NewsMetaId");

                    b.ToTable("st_newsVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Pages.PageMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundJobId");

                    b.Property<string>("CurrentTags");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateToBePublished");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsHomePage");

                    b.Property<bool>("IsInNavigation");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsStaticPage");

                    b.Property<DateTime?>("LastPublished");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LinkId");

                    b.Property<int>("NavigationPriority");

                    b.Property<int>("PageStatus");

                    b.Property<Guid?>("PageTemplateMetaId");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("PermittedRolesIds");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Template")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PageTemplateMetaId");

                    b.HasIndex("ParentId");

                    b.ToTable("st_pageMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Pages.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("PageMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("PageMetaId", "Culture", "Version");

                    b.ToTable("st_pageVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Templates.PageTemplateMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundJobId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateToBePublished");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("LastPublished");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LinkId");

                    b.Property<int>("PageStatus");

                    b.Property<Guid?>("PageTemplateId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Template")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("st_pageTemplateMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Templates.PageTemplateVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("PageTemplateMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("PageTemplateMetaId");

                    b.ToTable("st_pageTemplateVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Url.Link2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MainUrl")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<Guid>("MainUrlId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_links");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Url.UrlBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid?>("Link2Id");

                    b.Property<string>("SiteId")
                        .HasMaxLength(150);

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Link2Id");

                    b.ToTable("st_urlbase");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("AllowedRoles");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("System");

                    b.HasKey("Id");

                    b.ToTable("st_permissions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SEOKeywords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<string>("Words");

                    b.HasKey("Id");

                    b.ToTable("st_seoKeywords");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Domain");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("st_sites");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteId");

                    b.Property<Guid>("SiteKey");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_siteConfigs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("ItemId");

                    b.Property<string>("ItemType");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Message");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("SiteSyncStatusId");

                    b.Property<bool>("Successful");

                    b.HasKey("Id");

                    b.HasIndex("SiteSyncStatusId");

                    b.ToTable("st_sitesyncResponses");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSyncHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsSynced");

                    b.Property<Guid>("ItemId");

                    b.Property<string>("ItemLastTitle");

                    b.Property<string>("ItemType");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TargetSiteId");

                    b.HasKey("Id");

                    b.ToTable("st_sitesyncHistory");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSyncStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("OriginSite");

                    b.Property<string>("OriginUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.Property<string>("TargetSite");

                    b.HasKey("Id");

                    b.ToTable("st_sitesyncStatus");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.StaticPageCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Language");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("PageId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_static_page_cache");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_tags");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ThumbnailSizes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Height");

                    b.Property<string>("LastUserId");

                    b.Property<decimal>("MultiplyerX")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("MultiplyerY")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<int>("OffsetX");

                    b.Property<int>("OffsetY");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("st_thumbnails_sizes");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Trackable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContentId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("DefaultPageId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("TypeName")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("st_trackable");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Company")
                        .HasMaxLength(150);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DashboardConfiguration");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150);

                    b.Property<string>("FullName")
                        .HasMaxLength(150);

                    b.Property<string>("GoogleAuthenticatorSecretKey")
                        .HasMaxLength(150);

                    b.Property<string>("Info")
                        .HasMaxLength(500);

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGoogleAuthenticatorEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(150);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserGroups");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<string>("UnsubscribedUsers");

                    b.HasKey("Id");

                    b.ToTable("st_userGroups");
                });

            modelBuilder.Entity("SiteTriks.DocumentationModule.Data.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("TopicType");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("st_topics");
                });

            modelBuilder.Entity("SiteTriks.DocumentationModule.Data.Models.TopicContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(1000000);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_topicContents");
                });

            modelBuilder.Entity("SiteTriks.DocumentationModule.Data.Models.TopicVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<Guid?>("TopicContentId");

                    b.Property<Guid>("TopicId");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("TopicContentId");

                    b.HasIndex("TopicId");

                    b.ToTable("st_topicVersions");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_ec_categories");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.DeliveryOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("StatusUpdateMode");

                    b.Property<Guid?>("StoreId");

                    b.Property<string>("UrlForStatusUpdate");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_deliveryOptions");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("DeliveryOptionId");

                    b.Property<DateTime?>("ExpectedDeliveryDate");

                    b.Property<string>("LastUserId");

                    b.Property<string>("PaymentOption");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("StoreId");

                    b.Property<string>("UserFeedBack");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOptionId");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_orders");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid?>("OrderId");

                    b.Property<string>("PaymentIdentifier");

                    b.Property<string>("PaymentOptionType");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Status");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("st_ec_payments");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.PhysicalLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_physicalLocations");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.CategoryExtraFieldConfig", b =>
                {
                    b.Property<Guid>("StoreItemExtraFieldsConfigId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("StoreItemExtraFieldsConfigId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("st_ec_categories_extraFieldsConfig");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.StoreCategory", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("StoreId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("st_ec_stores_categories");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.StoreItemCategory", b =>
                {
                    b.Property<Guid>("StoreItemId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("StoreItemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("st_ec_storeItems_categories");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsAnonymous");

                    b.Property<string>("LastUserId");

                    b.Property<int>("Rating");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid?>("StoreItemId");

                    b.Property<string>("Text");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.ToTable("st_ec_review");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LinkId");

                    b.Property<string>("PaymentOptions");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Skin");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.ToTable("st_ec_stores");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AvailableInPhysicalStore");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Images");

                    b.Property<bool>("IsOnSale");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MainImage");

                    b.Property<string>("ManualRelatedItems");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("RemainingQuantity");

                    b.Property<int>("SalePeriod");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("SaleQuantity");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("StoreId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_storeItems");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItemExtraField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("StoreItemExtraFieldConfigId");

                    b.Property<Guid>("StoreItemId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.ToTable("st_ec_storeItemExtraFields");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItemExtraFieldsConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("StoreId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_storeItemExtraFieldsConfig");
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreSkin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompiledFullPageSkin");

                    b.Property<string>("CompiledGridSkin");

                    b.Property<string>("CompiledPreviewSkin");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FullPageSkin");

                    b.Property<string>("GridSkin");

                    b.Property<string>("LastUserId");

                    b.Property<string>("PreviewSkin");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Status");

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("st_ec_storeSkins");
                });

            modelBuilder.Entity("SiteTriks.ErrorPagesModule.Data.Models.ErrorPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastUserId");

                    b.Property<Guid?>("PageMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("StatusCode");

                    b.HasKey("Id");

                    b.HasIndex("PageMetaId");

                    b.ToTable("st_errorPages");
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("forum_categories");
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("ThemeId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_posts");
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("forum_themes");
                });

            modelBuilder.Entity("SiteTriks.MarketingEmailModule.Data.Models.MarketingEmailSubscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MarketingEmailGroups");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_marketingEmailSubscribers");
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssFeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuilderName")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LinkId");

                    b.Property<string>("MapFrom")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.ToTable("st_rssFeeds");
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssFeedField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FieldName");

                    b.Property<string>("FieldValue");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("RssFeedId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("RssFeedId");

                    b.ToTable("st_rssFeedFields");
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssItemMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FieldFrom");

                    b.Property<string>("FieldTo");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("RssFeedId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("RssFeedId");

                    b.ToTable("st_rssItemMappings");
                });

            modelBuilder.Entity("SiteTriks.SiteSync.Data.Models.SiteSyncTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<Guid>("SiteId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TargetIdentifier");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("st_siteSyncTargets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiteTriks.BlogModule.Data.Models.BlogPost", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.BaseMetasTags", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Tag", "Tag")
                        .WithMany("Parents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Comment", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceOrder", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.ECommerceItem", "ECommerceItem")
                        .WithMany()
                        .HasForeignKey("ECommerceItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.ECommercePayment", "ECommercePayment")
                        .WithMany()
                        .HasForeignKey("ECommercePaymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.File", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.FileUse", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Filter", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.EndPoint", "EndPoint")
                        .WithMany("Filters")
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Languages.MultiLingualField", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Library", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Prefix")
                        .WithMany()
                        .HasForeignKey("PrefixId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.LibraryThumbnails", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Library", "Library")
                        .WithMany("LibraryThumbnails")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.ThumbnailSizes", "Thumbnail")
                        .WithMany("LibraryThumbnails")
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.News.NewsMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.News.NewsVersion", "DraftNewsVersion")
                        .WithMany()
                        .HasForeignKey("DraftNewsVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.News.NewsVersion", "PublishedNewsVersion")
                        .WithMany()
                        .HasForeignKey("PublishedNewsVersionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.News.NewsVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.News.NewsMeta", "NewsMeta")
                        .WithMany()
                        .HasForeignKey("NewsMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Pages.PageMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.Templates.PageTemplateMeta", "PageTemplateMeta")
                        .WithMany()
                        .HasForeignKey("PageTemplateMetaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.Pages.PageMeta", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Pages.PageVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Pages.PageMeta", "PageMeta")
                        .WithMany("Versions")
                        .HasForeignKey("PageMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Templates.PageTemplateMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.NewModels.Templates.PageTemplateMeta", "PageTemplate")
                        .WithMany()
                        .HasForeignKey("PageTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Templates.PageTemplateVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Templates.PageTemplateMeta", "PageTemplateMeta")
                        .WithMany("Versions")
                        .HasForeignKey("PageTemplateMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.NewModels.Url.UrlBase", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link2")
                        .WithMany("AdditionalUrls")
                        .HasForeignKey("Link2Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncResponse", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.SiteSyncStatus", "SiteSyncStatus")
                        .WithMany("CommunicationModels")
                        .HasForeignKey("SiteSyncStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.DocumentationModule.Data.Models.Topic", b =>
                {
                    b.HasOne("SiteTriks.DocumentationModule.Data.Models.Topic", "Parent")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.DocumentationModule.Data.Models.TopicVersion", b =>
                {
                    b.HasOne("SiteTriks.DocumentationModule.Data.Models.TopicContent", "TopicContent")
                        .WithMany("Versions")
                        .HasForeignKey("TopicContentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.DocumentationModule.Data.Models.Topic", "Topic")
                        .WithMany("Versions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.DeliveryOption", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store")
                        .WithMany("DeliveryOptions")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Order", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.DeliveryOption", "DeliveryOption")
                        .WithMany()
                        .HasForeignKey("DeliveryOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Payment", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.PhysicalLocation", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany("PhysicalLocations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.CategoryExtraFieldConfig", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Category", "Category")
                        .WithMany("CategoryExtraFieldConfigs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.StoreItemExtraFieldsConfig", "GetStoreItemExtraFieldsConfig")
                        .WithMany("CategoryExtraFieldConfigs")
                        .HasForeignKey("StoreItemExtraFieldsConfigId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.StoreCategory", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Category", "Category")
                        .WithMany("StoreCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany("StoreCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Relationships.StoreItemCategory", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Category")
                        .WithMany("StoreItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.StoreItem")
                        .WithMany("Categories")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Review", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.StoreItem")
                        .WithMany("Reviews")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.Store", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItem", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Order")
                        .WithMany("StoreItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany("StoreItems")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItemExtraField", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.StoreItem")
                        .WithMany("ExtraFields")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreItemExtraFieldsConfig", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany("StoreItemExtraFieldsConfig")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ECommerseModule.Data.Models.StoreSkin", b =>
                {
                    b.HasOne("SiteTriks.ECommerseModule.Data.Models.Store", "Store")
                        .WithMany("StoreSkins")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ErrorPagesModule.Data.Models.ErrorPage", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Pages.PageMeta", "PageMeta")
                        .WithMany()
                        .HasForeignKey("PageMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Category", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Post", b =>
                {
                    b.HasOne("SiteTriks.ForumModule.Data.Models.Theme", "Theme")
                        .WithMany("Posts")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.ForumModule.Data.Models.Theme", b =>
                {
                    b.HasOne("SiteTriks.ForumModule.Data.Models.Category", "Category")
                        .WithMany("Themes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssFeed", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.NewModels.Url.Link2", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssFeedField", b =>
                {
                    b.HasOne("SiteTriks.RssFeedModule.Data.Models.RssFeed", "RssFeed")
                        .WithMany("RssFeedItems")
                        .HasForeignKey("RssFeedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.RssFeedModule.Data.Models.RssItemMapping", b =>
                {
                    b.HasOne("SiteTriks.RssFeedModule.Data.Models.RssFeed", "RssFeed")
                        .WithMany("ItemMappings")
                        .HasForeignKey("RssFeedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
