// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteTriksApp.Web.Data;

namespace SiteTriksApp.Web.Migrations
{
    [DbContext(typeof(SiteTriksAppContext))]
    [Migration("20190411143916_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.BaseMetasTags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BaseMetaId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("st_baseMetas_tags");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CommentComponentId");

                    b.Property<Guid?>("ComponentId");

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("CreatorId");

                    b.ToTable("st_comments");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_componentConnections");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Comments.CommentsComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EntityConnectionId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("EntityConnectionId");

                    b.ToTable("st_commentsComponent");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Configuration.ComponentsConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Components");

                    b.Property<string>("ContainerName");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_componentsConfigurations");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Files.FileComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EntityConnectionId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("EntityConnectionId");

                    b.ToTable("st_fileComponents");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Files.FileFileComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("FileComponentId");

                    b.Property<Guid?>("FileId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("FileComponentId");

                    b.HasIndex("FileId");

                    b.ToTable("st_fileFileComponents");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Links.LinkComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EntityConnectionId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("EntityConnectionId");

                    b.ToTable("st_linkComponents");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Publish.PublishComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EntityConnectionId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("EntityConnectionId");

                    b.ToTable("st_publishComponents");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Config.Config", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsIdenticalToFile");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_configs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.DefaultLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("st_defaultLinks");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.DynamicView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("LastRequested");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("WidgetName");

                    b.HasKey("Id");

                    b.ToTable("st_dynamicViews");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("ImagesUrlsIDs");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MainImageUrlID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("st_ecommerceItems");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("ECommerceItemId");

                    b.Property<Guid?>("ECommercePaymentId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ECommerceItemId");

                    b.HasIndex("ECommercePaymentId");

                    b.ToTable("st_ecommerceOrders");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommercePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("InvoiceCode");

                    b.Property<string>("LastUserId");

                    b.Property<int>("Method");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("st_ecommercePayments");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.EndPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Column");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("JoinFields");

                    b.Property<string>("JoinKey");

                    b.Property<string>("JoinTable");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("RequestType");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int?>("Skip");

                    b.Property<int?>("Take");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_endPoints");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ExceptionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Domain");

                    b.Property<string>("ExceptionInformation");

                    b.HasKey("Id");

                    b.ToTable("st_exceptionLogs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt");

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<byte[]>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension");

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("LibraryId");

                    b.Property<Guid?>("OriginalFile");

                    b.Property<string>("RefferedInNews");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("SizeName");

                    b.Property<string>("StorageProviderName");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("UsedInPages");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.HasIndex("LibraryId");

                    b.ToTable("st_files");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.FileBinary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<byte[]>("FileContent");

                    b.Property<Guid>("FileId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("FileBinaries");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.FileUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("FileId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("UsedInNews");

                    b.Property<string>("UsedInPages");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("st_fileUse");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllowedTypes");

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("StorageProviderName");

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.ToTable("st_libraries");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.LibraryThumbnails", b =>
                {
                    b.Property<Guid>("ThumbnailId");

                    b.Property<Guid>("LibraryId");

                    b.HasKey("ThumbnailId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("st_library_thumbnails");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.ThumbnailSizes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Height");

                    b.Property<string>("LastUserId");

                    b.Property<decimal>("MultiplyerX")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("MultiplyerY")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<int>("OffsetX");

                    b.Property<int>("OffsetY");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("st_thumbnails_sizes");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Filter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Comparison");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("EndPointId");

                    b.Property<string>("LastUserId");

                    b.Property<string>("PropertyName");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EndPointId");

                    b.ToTable("st_filters");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.HtmlBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_htmlBlocks");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("UrlPrefix");

                    b.HasKey("Id");

                    b.ToTable("st_languages");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Languages.MultiLingualField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FieldName")
                        .HasMaxLength(150);

                    b.Property<Guid>("LanguageId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Value")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("st_multiLingualFields");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Links.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ComponentId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("st_links");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Logging.DatabaseLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Formatter");

                    b.Property<string>("LastUserId");

                    b.Property<string>("LogLevel");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<DateTime>("TimeOfEvent");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("st_logs");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.MarketingEmailOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Index");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_marketingEmailOptions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.News.NewsMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.ToTable("st_newsMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.News.NewsVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("DisplayTitle");

                    b.Property<string>("LastUserId");

                    b.Property<Guid?>("MainImageId");

                    b.Property<Guid>("NewsMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.HasIndex("MainImageId");

                    b.HasIndex("NewsMetaId");

                    b.ToTable("st_newsVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Pages.PageMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<string>("CurrentTags");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsAMPPage");

                    b.Property<bool>("IsHomePage");

                    b.Property<bool>("IsInNavigation");

                    b.Property<string>("LastUserId");

                    b.Property<int>("NavigationPriority");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("PermittedRolesIds");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid?>("TemplateMetaId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TemplateMetaId");

                    b.ToTable("st_pageMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Pages.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("PageMetaId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("PageMetaId", "Culture", "Version");

                    b.ToTable("st_pageVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Permissions.PermissionConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("ActionType");

                    b.Property<string>("AllowedRoles");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("PermissionSystemId");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionSystemId");

                    b.ToTable("st_permissionConfigurations");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Permissions.PermissionSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("System");

                    b.HasKey("Id");

                    b.ToTable("st_permissionSystems");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Publish.PublishData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BackgroundJobId");

                    b.Property<Guid?>("ComponentId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DateToBePublished");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("LastPublished");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("MetaId");

                    b.Property<string>("MetaType");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("st_publishData");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SEOKeywords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Type");

                    b.Property<string>("Words");

                    b.HasKey("Id");

                    b.ToTable("st_seoKeywords");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ScheduledTasks.ScheduledTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("DateOfExecutionUtc");

                    b.Property<string>("GenericTypes");

                    b.Property<string>("Info");

                    b.Property<string>("LastUserId");

                    b.Property<string>("MethodName");

                    b.Property<string>("Params");

                    b.Property<string>("ServiceType");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Status");

                    b.Property<Guid>("TaskId");

                    b.HasKey("Id");

                    b.ToTable("st_scheduledTasks");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Domain");

                    b.Property<string>("Name");

                    b.Property<Guid>("SiteProviderId");

                    b.HasKey("Id");

                    b.ToTable("st_sites");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsSynced");

                    b.Property<Guid>("ItemId");

                    b.Property<string>("ItemLastTitle");

                    b.Property<string>("ItemType");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TargetSiteId");

                    b.HasKey("Id");

                    b.ToTable("st_sitesyncHistory");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("ItemId");

                    b.Property<string>("ItemType");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Message");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("SiteSyncStatusId");

                    b.Property<bool>("Successful");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SiteSyncStatusId");

                    b.ToTable("st_sitesyncResponses");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("OriginSite");

                    b.Property<string>("OriginUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<int>("Status");

                    b.Property<string>("TargetSite");

                    b.HasKey("Id");

                    b.ToTable("st_sitesyncStatus");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("st_tags");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Templates.TemplateMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentConnectionId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid?>("TemplateMetaId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ComponentConnectionId");

                    b.HasIndex("TemplateMetaId");

                    b.ToTable("st_templateMetas");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Templates.TemplateVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<Guid>("TemplateMetaId");

                    b.Property<int>("Type");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateMetaId");

                    b.ToTable("st_templateVersions");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Trackable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContentId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("DefaultPageId");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("TypeName")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("st_trackable");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Company")
                        .HasMaxLength(150);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DashboardConfiguration");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150);

                    b.Property<string>("FullName")
                        .HasMaxLength(150);

                    b.Property<string>("GoogleAuthenticatorSecretKey")
                        .HasMaxLength(150);

                    b.Property<string>("Info")
                        .HasMaxLength(500);

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGoogleAuthenticatorEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(150);

                    b.Property<string>("LastUserId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserGroups");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SiteTriks.Data.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LastUserId");

                    b.Property<Guid>("SiteProviderId");

                    b.Property<string>("Title");

                    b.Property<string>("UnsubscribedUsers");

                    b.HasKey("Id");

                    b.ToTable("st_userGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.BaseMetasTags", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Tag", "Tag")
                        .WithMany("Parents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Comment", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.Comments.CommentsComponent", "Component")
                        .WithMany("ComponentDataCollection")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Comments.CommentsComponent", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "EntityConnection")
                        .WithMany()
                        .HasForeignKey("EntityConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Files.FileComponent", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "EntityConnection")
                        .WithMany()
                        .HasForeignKey("EntityConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Files.FileFileComponent", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.Files.FileComponent", "FileComponent")
                        .WithMany("ComponentDataCollection")
                        .HasForeignKey("FileComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Files.File", "File")
                        .WithMany("Components")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Links.LinkComponent", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "EntityConnection")
                        .WithMany()
                        .HasForeignKey("EntityConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Components.Publish.PublishComponent", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "EntityConnection")
                        .WithMany()
                        .HasForeignKey("EntityConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.ECommerceOrder", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.ECommerceItem", "ECommerceItem")
                        .WithMany()
                        .HasForeignKey("ECommerceItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.ECommercePayment", "ECommercePayment")
                        .WithMany()
                        .HasForeignKey("ECommercePaymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.File", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Files.Library", "Library")
                        .WithMany("Files")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.FileUse", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.Library", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Files.LibraryThumbnails", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Files.Library", "Library")
                        .WithMany("LibraryThumbnails")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Files.ThumbnailSizes", "Thumbnail")
                        .WithMany("LibraryThumbnails")
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Filter", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.EndPoint", "EndPoint")
                        .WithMany("Filters")
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Languages.MultiLingualField", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Links.Link", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.Links.LinkComponent", "Component")
                        .WithMany("ComponentDataCollection")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.News.NewsMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.News.NewsVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Files.File", "MainImage")
                        .WithMany()
                        .HasForeignKey("MainImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.News.NewsMeta", "NewsMeta")
                        .WithMany("Versions")
                        .HasForeignKey("NewsMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Pages.PageMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Pages.PageMeta", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Templates.TemplateMeta", "TemplateMeta")
                        .WithMany()
                        .HasForeignKey("TemplateMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Pages.PageVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Pages.PageMeta", "PageMeta")
                        .WithMany("Versions")
                        .HasForeignKey("PageMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Permissions.PermissionConfiguration", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Permissions.PermissionSystem", "PermissionSystem")
                        .WithMany("Methods")
                        .HasForeignKey("PermissionSystemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Publish.PublishData", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.Publish.PublishComponent", "Component")
                        .WithMany("ComponentDataCollection")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.SiteSync.SiteSyncResponse", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.SiteSync.SiteSyncStatus", "SiteSyncStatus")
                        .WithMany("CommunicationModels")
                        .HasForeignKey("SiteSyncStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Templates.TemplateMeta", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Components.BaseConnection.ComponentConnection", "ComponentConnection")
                        .WithMany()
                        .HasForeignKey("ComponentConnectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteTriks.Data.Models.Templates.TemplateMeta", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SiteTriks.Data.Models.Templates.TemplateVersion", b =>
                {
                    b.HasOne("SiteTriks.Data.Models.Templates.TemplateMeta", "TemplateMeta")
                        .WithMany("Versions")
                        .HasForeignKey("TemplateMetaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
