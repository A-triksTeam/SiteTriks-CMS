@model SiteTriks.Extentions.WidgetModels.MarketWidgetModel

@if (Model.IsPreview)
{
    <div class="preview-placeholder" data-identifier="@Model.Id">
        @await Html.PartialAsync("~/Areas/SiteTriks/Views/Shared/WidgetControl.cshtml", model: Model)

        <div class="@Model.CssClass">
            @await Component.InvokeAsync("MarketWidget", new { area = "", templateName = Model.TemplateName, preview = Model.Preview, lang = Model.Language })
        </div>
    </div>
}
else
{
    if (Model.CanViewByRole && Model.CanViewByGroup)
    {
        <div class="@Model.CssClass">
            @await Component.InvokeAsync("MarketWidget", new { area = "", templateName = Model.TemplateName, preview = Model.Preview, lang = Model.Language })
        </div>

    }
}

<script src="~/js/cart.js"></script>
<script>
    $(document).ready(function () {
        function drawOrder(itemId, title) {
            let $container = $("#cart-items");
            let span = $("<span></span>");
            span.text(title + ", ");
            $container.append(span);
        }

        function cleanOrders() {
            let $container = $("#cart-items");
            $container.empty();
        }
        
        //Draw and clean callbacks
        Cart.setCallbacks(drawOrder, cleanOrders);

        Cart.loadOrders();
        Cart.drawAll();

        $(".order-btn").on("click", function () {
            let itemId = $(this).attr("data-itemid");
            let title = $(this).attr("data-title");

            Cart.createOrder(itemId, title);
        });

        $("#cart-empty").on("click", function () {
            Cart.removeOrders();
            Cart.drawAll();
        });

        $("#cart-pay").on("click", function () {
            Cart.pay();
        });

        var $paymentOptions = $("#payment-method");
        $paymentOptions.append("<option value='0'>EPay</option>");
        $paymentOptions.append("<option value='1'>Paypal</option>");
    });
</script>