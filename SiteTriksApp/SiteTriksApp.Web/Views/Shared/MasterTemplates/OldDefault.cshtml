@inject SiteTriks.Configuration.JSON.Contracts.IGenericJsonProvider JsonProvider;

@model SiteTriks.Services.Models.Pages.DisplayPageServiceModel

@{
    string lang = ViewData["Lang"].ToString();
    bool isPreview = ViewData["Preview"].ToString() == "preview";
    if (isPreview || ViewData["Preview"].ToString() == "partial")
    {
        Layout = null;
    }
    else
    {
        Layout = "~/Views/Shared/_FrontEndLayout.cshtml";
        ViewBag.Title = Model.Title;
    }
}

@{ var css = Model.Contents.Where(c => c.Placeholder == "css").OrderBy(c => c.Order).ToArray(); }

@section styles {
    @if (!isPreview)
    {
        foreach (var item in css)
        {
            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = "", lang })
        }

    }
}

<div class="template-content">
    <input name="SEOKeyword" value="@Model.SEOKeyword" type="hidden" />
    @if (isPreview || ViewData["Preview"].ToString() == "partial")
    {

        foreach (var item in css)
        {
            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang })
        }
        <div class="placeholder" data-placeholder="css"></div>
    }

    <header data-placeholder="header" class="placeholder header-modern header-transparent header-dark @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
        @{ var header = Model.Contents.Where(c => c.Placeholder == "header").OrderBy(c => c.Order).ToArray(); }
        @foreach (var item in header)
        {
            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
        }
    </header>

    <div class="conntent-wrapper main-content">
        <content>
            <div class="row-content">
                <div class="row content-placeholder row-placeholder">
                    <div data-placeholder="0" class="placeholder @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
                        @{ var content0 = Model.Contents.Where(c => c.Placeholder == "0").OrderBy(c => c.Order).ToArray(); }
                        @foreach (var item in content0)
                        {
                            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
                        }
                    </div>
                </div>
            </div>
            <div class="row-content">
                <div class="row content-placeholder row-placeholder">
                    <div data-placeholder="1" class="placeholder col-lg-6 column-placeholder @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
                        @{ var content1 = Model.Contents.Where(c => c.Placeholder == "1").OrderBy(c => c.Order).ToArray(); }
                        @foreach (var item in content1)
                        {
                            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
                        }
                    </div>
                    <div data-placeholder="2" class="placeholder col-lg-6 column-placeholder @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
                        @{ var content2 = Model.Contents.Where(c => c.Placeholder == "2").OrderBy(c => c.Order).ToArray(); }
                        @foreach (var item in content2)
                        {
                            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
                        }
                    </div>
                </div>
            </div>
            <div class="row-content">
                <div data-placeholder="empty" class="placeholder row content-placeholder no-margin row-placeholder @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
                    @{ var empty = Model.Contents.Where(c => c.Placeholder == "empty").OrderBy(c => c.Order).ToArray(); }
                    @foreach (var item in empty)
                    {
                        @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
                    }
                </div>
            </div>
        </content>

        <footer data-placeholder="footer" class="placeholder content-placeholder row-placeholder @(isPreview ? "preview-placeholder drop static connected-widget-container" : "")">
            @{ var footer = Model.Contents.Where(c => c.Placeholder == "footer").OrderBy(c => c.Order).ToArray(); }
            @foreach (var item in footer)
            {
                @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview ? "preview" : "", lang });
            }
        </footer>
    </div>

    @if (isPreview || ViewData["Preview"].ToString() == "partial")
    {
        var javascript = Model.Contents.Where(c => c.Placeholder == "javascript").OrderBy(c => c.Order).ToArray();
        foreach (var item in javascript)
        {
            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = isPreview? "preview" : "", lang })
        }
        <div class="placeholder" data-placeholder="javascript"></div>
    }
</div>

@section scripts {
    @if (!isPreview || ViewData["Preview"].ToString() == "partial")
    {
        var javascript = Model.Contents.Where(c => c.Placeholder == "javascript").OrderBy(c => c.Order).ToArray();
        foreach (var item in javascript)
        {
            @await Component.InvokeAsync("RenderWidget", new { content = item, preview = "", lang })
        }
    }
}
